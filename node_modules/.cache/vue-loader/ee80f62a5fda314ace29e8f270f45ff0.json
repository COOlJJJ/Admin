{"remainingRequest":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\src\\views\\permission\\role.vue?vue&type=style&index=0&id=37039a8c&lang=scss&scoped=true&","dependencies":[{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\src\\views\\permission\\role.vue","mtime":1649400033602},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hcHAtY29udGFpbmVyIHsKICAucm9sZXMtdGFibGUgewogICAgbWFyZ2luLXRvcDogMzBweDsKICB9CiAgLnBlcm1pc3Npb24tdHJlZSB7CiAgICBtYXJnaW4tYm90dG9tOiAzMHB4OwogIH0KfQo="},{"version":3,"sources":["role.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"role.vue","sourceRoot":"src/views/permission","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-button type=\"primary\" @click=\"handleAddRole\">New Role</el-button>\n\n    <el-table :data=\"rolesList\" style=\"width: 100%; margin-top: 30px\" border>\n      <el-table-column align=\"center\" label=\"Role Key\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.id }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"center\" label=\"Role Name\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.name }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"header-center\" label=\"Description\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.description }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"center\" label=\"Operations\">\n        <template slot-scope=\"scope\">\n          <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope)\"\n            >Edit</el-button\n          >\n          <el-button type=\"danger\" size=\"small\" @click=\"handleDelete(scope)\"\n            >Delete</el-button\n          >\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <el-dialog\n      :visible.sync=\"dialogVisible\"\n      :title=\"dialogType === 'edit' ? 'Edit Role' : 'New Role'\"\n    >\n      <el-form :model=\"role\" label-width=\"80px\" label-position=\"left\">\n        <el-form-item label=\"Name\">\n          <el-input v-model=\"role.name\" placeholder=\"Role Name\" />\n        </el-form-item>\n        <el-form-item label=\"Desc\">\n          <el-input\n            v-model=\"role.description\"\n            :autosize=\"{ minRows: 2, maxRows: 4 }\"\n            type=\"textarea\"\n            placeholder=\"Role Description\"\n          />\n        </el-form-item>\n      </el-form>\n      <div style=\"text-align: right\">\n        <el-button type=\"danger\" @click=\"dialogVisible = false\"\n          >Cancel</el-button\n        >\n        <el-button type=\"primary\" @click=\"confirmRole\">Confirm</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport path from 'path'\nimport { deepClone } from '@/utils'\nimport { getRoles, addRole, deleteRole, updateRole } from '@/api/role'\n\n\nexport default {\n  data() {\n    return {\n      role: {},\n      rolesList: [],\n      dialogVisible: false,\n      dialogType: 'new',\n    }\n  },\n  created() {\n    this.getRoles()\n  },\n  methods: {\n    handleDelete({ $index, row }) {\n      this.$confirm('Confirm to remove the role?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async () => {\n          await deleteRole(row.id)\n          this.rolesList.splice($index, 1)\n          this.$message({\n            type: 'success',\n            message: 'Delete succed!'\n          })\n        })\n        .catch(err => { console.error(err) })\n    },\n\n    async confirmRole() {\n      const isEdit = this.dialogType === 'edit'\n      if (isEdit) {\n        await updateRole(this.role)\n        this.getRoles()\n      } else {\n        await addRole(this.role)\n        this.getRoles()\n      }\n      const { name, description } = this.role\n      this.dialogVisible = false\n      this.$notify({\n        title: 'Success',\n        dangerouslyUseHTMLString: true,\n        message: `\n            <div>Role Name: ${name}</div>\n            <div>Description: ${description}</div>\n          `,\n        type: 'success'\n      })\n      this.role = {}\n    },\n\n    async getRoles() {\n      const res = await getRoles()\n      this.rolesList = res.response\n    },\n    handleAddRole() {\n      this.dialogType = 'new'\n      this.dialogVisible = true\n    },\n    handleEdit(scope) {\n      this.dialogType = 'edit'\n      this.dialogVisible = true\n      this.checkStrictly = true\n      this.role = deepClone(scope.row)\n    }\n  },\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.app-container {\n  .roles-table {\n    margin-top: 30px;\n  }\n  .permission-tree {\n    margin-bottom: 30px;\n  }\n}\n</style>\n"]}]}