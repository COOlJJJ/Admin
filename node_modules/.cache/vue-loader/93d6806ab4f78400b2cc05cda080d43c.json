{"remainingRequest":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\src\\views\\permission\\directive.vue?vue&type=template&id=3a6147a9&scoped=true&","dependencies":[{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\src\\views\\permission\\directive.vue","mtime":1649402597258},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UserData\\Z0047YMR\\Documents\\GitHub\\Admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}